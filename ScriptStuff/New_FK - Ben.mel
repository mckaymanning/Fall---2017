string $buffer[];
string $children[];
string $currentGrp[];
string $thisGrp;
string $newName;
string $currentCtrl[];
string $topGrp;
float $numTokens;
int $size;
int $l;
int $j;
//
// First We are going to create the base "transform" control and group
//
select -cl;
circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 20 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1; objectMoveCommand;
rename ("Transform_Ctrl");
doGroup 0 1 1;
rename ("Transform_Grp");

//
//Next i'm selecting all the joints and placing them in an array
//
SelectAllJoints;
string $allJoints[] = `ls -sl`;

//
//I use several for loops but this first for loop will be to create all of the controls and the groups.
//
for($size = 0; $size < size($allJoints); $size++)
{
    //I clear the array and then use the "tokenize" command to check the name of the current joint.
    //the way this works is I tell it which string to tokenize, in this case "$allJoints[$size].
    //the next thing required for the tokenize command is telling it which character to look for
    //tokenize can only take one character so in this case im checking for "_". What that does if break the
    //name of the joint down into individual strings and then i place them in the $buffer.
    //for example a joint names L_R_Elbow_Jnt would be broken down into 4 strings "L", "R", "Elbow", and "Jnt"
    clear $buffer;
    $numTokens = `tokenize $allJoints[$size] "_" $buffer`;
    
    //I add the first character of the array to the new name and then use a for loop based off the sizee of $buffer -1
    //I use minus one because I dont want the "Jnt" part of the string.
    //
    $newName = $buffer[0];
    for($i = 0; $i < (size($buffer) -1); $i++)
    {
        //this if statement is actually useless for some reason it doesnt work at all, but the script will work without it(i think haha)
        if($buffer[$i+1] != "Jnt")
        {
            //We go through each part of the array and add it to the string $newName. I use $i+1 because i already assigned the first variable of the array so i want to skip it.
            $newName = ($newName + "_" + $buffer[$i +1]);
        } 
    }
    //now i create a contol and a group. I name the group using the new name that we set in the previous for loop.
    circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1; objectMoveCommand;
    rename ($newName + "_Ctrl");
    doGroup 0 1 1;
    rename ($newName  + "_Grp");
    //we will need to be able to get the group and the ctrl associated to the current joint that is selected so we add the current control and the
    //current group to arrays made specifically for them.
    $currentCtrl[$size] = ($newName + "_Ctrl");
    $currentGrp[$size] = ($newName + "_Grp");
    //with the current group selected i then select the current joint and match its transform
    select -tgl $allJoints[$size]; 
    matchTransform;   
}

//this next for loop will be doing the more complicated stuff, finding the child of the currenly selected joint
//and then re-tokenizing the name of the child joint so that we can then use that name to find the name of said child
//joints group.
for($size = 0; $size < size($allJoints); $size++)
{
    select -r $allJoints[$size];
    //this if statement checks to see if the currently selected joint has any children, if it does, the script continues
    if(size(`listRelatives -c`) != 0)
    {
        //$children is an array, i used an array for instances where there might be more than one child.
        //it assigns the value of all of the joints children to the array.
        $children = `listRelatives -c`;
        
        //Becuase there may be multiple children i used a for loop so that i could find the childs group for each of the children
        //in the $children array.
        for($l = 0; $l < size($children); $l++)
        {
            //its important to always clear the array $buffer because otherwise, it just get bigger and bigger every time the for loop runs.
            clear $buffer;
            $numTokens = `tokenize $children[$l] "_" $buffer`;
            $newName = $buffer[0];
            
            //In this for loop, I used size($buffer) -2 instead of -1. I dont fully understand why, but it doesnt work correctly if you do -1
            //like the first tokenize.
            for($i = 0; $i < (size($buffer) -2); $i++)
            {
                select -r $currentCtrl[$size];
                $newName = ($newName + "_" + $buffer[$i +1]);
            }
            //so now that we have the name of the joint minus the "_Jnt" part we select the childs group, the parent joints control and then parent them.
            $thisGrp = ($newName + "_Grp");
            select -r $thisGrp;
            select -tgl $currentCtrl[$size];
            parent; 
            
            select -r $allJoints[$size];   
        }       
    } 
    //This checks if the current joint has any children, if it doesnt have any children, then it will take the ctrl group of the joint and childs it to the root Transform_Ctrl
    if(size(`listRelatives -ap`) == 0)
    {
        //this is why i needed the array for the current groups, because this code doesnt go through all the joints like top to bottom.
        //for some reason it goes through all the joints randomly. so the way this was done, the $currentGrp[$size] will return the currently selected's control group every time
        select -r $currentGrp[$size];
               
        select -tgl Transform_Ctrl;
        parent;
    } 
}

//Now that all the placement is correct and we dont have to worry about if joints have any children or anything, we can go ahead and parent and scale constraint everything.
//so I used another for loop so we can run it for every single joint that hass been added to $allJoints.
for($size = 0; $size < size($allJoints); $size++)
{
    //this part is reletively simple, and why i needed to store the current controls in the same position in its array as the joint is in its array.
    //so i select the current joints control, and then its joint and add the constraints.
    select -r $currentCtrl[$size];
    select -tgl $allJoints[$size];
    scaleConstraint -offset 1 1 1 -weight 1;
    parentConstraint -mo -weight 1;
} 
select -cl;